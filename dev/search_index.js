var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = PointProcessFilters","category":"page"},{"location":"#PointProcessFilters","page":"Home","title":"PointProcessFilters","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for PointProcessFilters.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [PointProcessFilters]","category":"page"},{"location":"#Base.filter-Union{Tuple{T}, Tuple{D}, Tuple{Meshes.PointSet{D, T}, PointProcessFilters.SpatialFilter{D}}} where {D, T}","page":"Home","title":"Base.filter","text":"filter(X::PointSet{D,T}, r::SpatialFilter{D}) where {D,T}\n\nApplies a given spatial filter r to a point set. The output can be evaluated as a function.\n\nExample\n\nr = 1.0\nX = PointSet(Point.(rand(10), rand(10)))\nY = filter(X, r)\nY(1.0,1.0)\nu = (1.0,1.0)\nY(u)\n\n\n\n\n\n","category":"method"},{"location":"#PointProcessFilters.boxpass-Tuple{Meshes.PointSet, Any, Any}","page":"Home","title":"PointProcessFilters.boxpass","text":"boxpass(X::PointSet, a, b)\n\nApplies the box pass filter to boxes with corners a, b and -a, -b.\n\n\n\n\n\n","category":"method"},{"location":"#PointProcessFilters.centeredboxpass-Tuple{Meshes.PointSet, Any}","page":"Home","title":"PointProcessFilters.centeredboxpass","text":"centeredboxpass(X::PointSet, a)\n\nApplies a centered box pass filter, i.e. a box with corners -a, a.\n\n\n\n\n\n","category":"method"},{"location":"#PointProcessFilters.centeredcirclepass-Union{Tuple{T}, Tuple{D}, Tuple{Meshes.PointSet{D, T}, Any}} where {D, T}","page":"Home","title":"PointProcessFilters.centeredcirclepass","text":"centeredcirclepass(X::PointSet{D,T}, r) where {D,T}\n\nApplies a circle pass filter centered at zero, with radius r.\n\n\n\n\n\n","category":"method"},{"location":"#PointProcessFilters.check_region_condition-Tuple{Meshes.Geometry}","page":"Home","title":"PointProcessFilters.check_region_condition","text":"check_region_condition(::Geometry)\n\nPerform additional checks on the provided region.\n\n\n\n\n\n","category":"method"},{"location":"#PointProcessFilters.circlepass-Tuple{Meshes.PointSet, Any, Any}","page":"Home","title":"PointProcessFilters.circlepass","text":"circlepass(X::PointSet, p, r)\n\nApplies a circle pass filter with circles centered at p and -p in wavenumber and radii of r.\n\n\n\n\n\n","category":"method"},{"location":"#PointProcessFilters.impulse_response-Tuple{RegionPassFilter}","page":"Home","title":"PointProcessFilters.impulse_response","text":"impulse_response(r::RegionPassFilter)\n\nComputes the impulse response function for a region pass filter. Result is of type ImpulseResponseRegion, a callable struct.\n\n\n\n\n\n","category":"method"},{"location":"#PointProcessFilters.impulseresponse_precomp-Tuple{Meshes.Geometry}","page":"Home","title":"PointProcessFilters.impulseresponse_precomp","text":"impulseresponse_precomp(::Geometry)\n\nGenerates precomputed quantities for a given region.\n\n\n\n\n\n","category":"method"},{"location":"#PointProcessFilters.ringpass-Union{Tuple{T}, Tuple{D}, Tuple{Meshes.PointSet{D, T}, Any, Any}} where {D, T}","page":"Home","title":"PointProcessFilters.ringpass","text":"ringpass(X::PointSet{D,T}, a, b) where {D,T}\n\nApplies a ring pass (annulus) filter with the inner radius a and outer radius b.\n\n\n\n\n\n","category":"method"}]
}
